@{
    ViewData["Title"] = "Home Page";
}

    <div class="">
        <h2>Page 1</h2>
        <h3>#1</h3>
        <p>Show the first name and the email address of customer with CompanyName 'Bike World'</p>
        @await Component.InvokeAsync("CodeChallengeLoader", new { challenge = 1 })

        <h3>#2</h3>
        <p>Show the CompanyName for all customers with an address in City 'Dallas'.</p>
        @await Component.InvokeAsync("CodeChallengeLoader", new { challenge = 2 })

        <h3>#3</h3>
        <p>How many items with ListPrice more than $1000 have been sold?</p>
        @await Component.InvokeAsync("CodeChallengeLoader", new { challenge = 3 })


        <h3>#4</h3>
        <p>Give the CompanyName of those customers with orders over $100000. Include the subtotal plus tax plus freight.</p>
        @await Component.InvokeAsync("CodeChallengeLoader", new { challenge = 4 })

        <h3>#5</h3>
        <p>Find the number of left racing socks ('Racing Socks, L') ordered by CompanyName 'Riding Cycles'</p>
        @await Component.InvokeAsync("CodeChallengeLoader", new { challenge = 5 })

        <h2>Page 2</h2>
        <h3>#6</h3>
        <p>A "Single Item Order" is a customer order where only one item is ordered. Show the SalesOrderID and the UnitPrice for every Single Item Order.</p>
        @await Component.InvokeAsync("CodeChallengeLoader", new { challenge = 6 })
        <h3>#7</h3>
        <p>Where did the racing socks go? List the product name and the CompanyName for all Customers who ordered ProductModel 'Racing Socks'.</p>
        @await Component.InvokeAsync("CodeChallengeLoader", new { challenge = 7 })

        <h3>#8</h3>
        <p>Show the product description for culture 'fr' for product with ProductID 736.</p>
        @await Component.InvokeAsync("CodeChallengeLoader", new { challenge = 8 })

        <h3>#9</h3>
        <p>Use the SubTotal value in SaleOrderHeader to list orders from the largest to the smallest. For each order show the CompanyName and the SubTotal and the total weight of the order.</p>
        @await Component.InvokeAsync("CodeChallengeLoader", new { challenge = 9 })
        <h3>#10</h3>
        <p>How many products in ProductCategory 'Cranksets' have been sold to an address in 'London'?</p>
        @await Component.InvokeAsync("CodeChallengeLoader", new { challenge = 10 })
        <h2>Page 3</h2>

        <h3>#11</h3>
        <p>For every customer with a 'Main Office' in Dallas show AddressLine1 of the 'Main Office' and AddressLine1 of the 'Shipping' address - if there is no shipping address leave it blank. Use one row per customer.</p>
        @await Component.InvokeAsync("CodeChallengeLoader", new { challenge = 11 })

        <h3>#12</h3>
        <p>
            For each order show the SalesOrderID and SubTotal calculated three ways:<br />
            A) From the SalesOrderHeader<br />
            B) Sum of OrderQty*UnitPrice<br />
            C) Sum of OrderQty*ListPrice<br />
        </p>
        @await Component.InvokeAsync("CodeChallengeLoader", new { challenge = 12 })


    </div>
